// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: album_lists.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addAlbumToList = `-- name: AddAlbumToList :one
insert into album_lists (id, user_lists_id,album_id)
values (
	gen_random_uuid(),
	$1,
	$2
)
returning id, user_lists_id, album_id
`

type AddAlbumToListParams struct {
	UserListsID uuid.UUID
	AlbumID     uuid.UUID
}

func (q *Queries) AddAlbumToList(ctx context.Context, arg AddAlbumToListParams) (AlbumList, error) {
	row := q.db.QueryRowContext(ctx, addAlbumToList, arg.UserListsID, arg.AlbumID)
	var i AlbumList
	err := row.Scan(&i.ID, &i.UserListsID, &i.AlbumID)
	return i, err
}

const createUserList = `-- name: CreateUserList :one
insert into user_lists (id_playlist_a, created_at, updated_at,name_,description_,type_, user_id)
values (
	gen_random_uuid(),
	NOW(),
	NOW(),
	$1,
	$2,
	$3,
	$4
)
returning id_playlist_a, created_at, updated_at, name_, description_, type_, user_id
`

type CreateUserListParams struct {
	Name        sql.NullString
	Description sql.NullString
	Type        sql.NullString
	UserID      uuid.UUID
}

func (q *Queries) CreateUserList(ctx context.Context, arg CreateUserListParams) (UserList, error) {
	row := q.db.QueryRowContext(ctx, createUserList,
		arg.Name,
		arg.Description,
		arg.Type,
		arg.UserID,
	)
	var i UserList
	err := row.Scan(
		&i.IDPlaylistA,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Type,
		&i.UserID,
	)
	return i, err
}

const deleteAlbumFromList = `-- name: DeleteAlbumFromList :exec
DELETE FROM album_lists
WHERE user_lists_id = $1 AND album_id = $2
`

type DeleteAlbumFromListParams struct {
	UserListsID uuid.UUID
	AlbumID     uuid.UUID
}

func (q *Queries) DeleteAlbumFromList(ctx context.Context, arg DeleteAlbumFromListParams) error {
	_, err := q.db.ExecContext(ctx, deleteAlbumFromList, arg.UserListsID, arg.AlbumID)
	return err
}

const deleteList = `-- name: DeleteList :exec
DELETE FROM user_lists
WHERE id_playlist_a = $1
`

func (q *Queries) DeleteList(ctx context.Context, idPlaylistA uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteList, idPlaylistA)
	return err
}

const getAlbumsFromList = `-- name: GetAlbumsFromList :many
SELECT a.id, a.name, a.img_url
FROM albums as a
JOIN album_lists as al ON a.id = al.album_id
WHERE al.user_lists_id = $1
`

type GetAlbumsFromListRow struct {
	ID     uuid.UUID
	Name   string
	ImgUrl string
}

func (q *Queries) GetAlbumsFromList(ctx context.Context, userListsID uuid.UUID) ([]GetAlbumsFromListRow, error) {
	rows, err := q.db.QueryContext(ctx, getAlbumsFromList, userListsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAlbumsFromListRow
	for rows.Next() {
		var i GetAlbumsFromListRow
		if err := rows.Scan(&i.ID, &i.Name, &i.ImgUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlbumsNotInList = `-- name: GetAlbumsNotInList :many
SELECT a.id, a.name, a.img_url
FROM albums as a
WHERE id NOT IN (
	SELECT album_id 
	FROM album_lists
	WHERE user_lists_id = $1
)
`

type GetAlbumsNotInListRow struct {
	ID     uuid.UUID
	Name   string
	ImgUrl string
}

func (q *Queries) GetAlbumsNotInList(ctx context.Context, userListsID uuid.UUID) ([]GetAlbumsNotInListRow, error) {
	rows, err := q.db.QueryContext(ctx, getAlbumsNotInList, userListsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAlbumsNotInListRow
	for rows.Next() {
		var i GetAlbumsNotInListRow
		if err := rows.Scan(&i.ID, &i.Name, &i.ImgUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListName = `-- name: GetListName :many
SELECT list.name_
FROM user_lists as list
WHERE list.id_playlist_a = $1
`

func (q *Queries) GetListName(ctx context.Context, idPlaylistA uuid.UUID) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, getListName, idPlaylistA)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var name_ sql.NullString
		if err := rows.Scan(&name_); err != nil {
			return nil, err
		}
		items = append(items, name_)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAlbumLists = `-- name: GetUserAlbumLists :many
SELECT list.id_playlist_a, list.name_
FROM user_lists as list
WHERE list.user_id = $1 AND type_ = 'album'
`

type GetUserAlbumListsRow struct {
	IDPlaylistA uuid.UUID
	Name        sql.NullString
}

func (q *Queries) GetUserAlbumLists(ctx context.Context, userID uuid.UUID) ([]GetUserAlbumListsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserAlbumLists, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserAlbumListsRow
	for rows.Next() {
		var i GetUserAlbumListsRow
		if err := rows.Scan(&i.IDPlaylistA, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserLists = `-- name: GetUserLists :many
SELECT list.id_playlist_a, list.name_
FROM user_lists as list
WHERE list.user_id = $1
`

type GetUserListsRow struct {
	IDPlaylistA uuid.UUID
	Name        sql.NullString
}

func (q *Queries) GetUserLists(ctx context.Context, userID uuid.UUID) ([]GetUserListsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserLists, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserListsRow
	for rows.Next() {
		var i GetUserListsRow
		if err := rows.Scan(&i.IDPlaylistA, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
